#ifndef H_1_14_4_PROTO_H
#define H_1_14_4_PROTO_H


/*
  This file was generated by mcd2c.py
  It should not be edited by hand
*/

#include <stddef.h>
#include "sds.h"
#include "datautils.h"

enum protocol_direction_id {
  toclient_id,
  toserver_id,
  protocol_direction_max
};

enum protocol_state_id {
  handshaking_id,
  status_id,
  login_id,
  play_id,
  protocol_state_max
};

enum handshaking_toclient_ids {
  handshaking_toclient_max
};

enum handshaking_toserver_ids {
  handshaking_toserver_set_protocol_id,
  handshaking_toserver_legacy_server_list_ping_id,
  handshaking_toserver_max
};

enum status_toclient_ids {
  status_toclient_server_info_id,
  status_toclient_ping_id,
  status_toclient_max
};

enum status_toserver_ids {
  status_toserver_ping_start_id,
  status_toserver_ping_id,
  status_toserver_max
};

enum login_toclient_ids {
  login_toclient_disconnect_id,
  login_toclient_encryption_begin_id,
  login_toclient_success_id,
  login_toclient_compress_id,
  login_toclient_login_plugin_request_id,
  login_toclient_max
};

enum login_toserver_ids {
  login_toserver_login_start_id,
  login_toserver_encryption_begin_id,
  login_toserver_login_plugin_response_id,
  login_toserver_max
};

enum play_toclient_ids {
  play_toclient_spawn_entity_id,
  play_toclient_spawn_entity_experience_orb_id,
  play_toclient_spawn_entity_weather_id,
  play_toclient_spawn_entity_living_id,
  play_toclient_spawn_entity_painting_id,
  play_toclient_named_entity_spawn_id,
  play_toclient_animation_id,
  play_toclient_statistics_id,
  play_toclient_block_break_animation_id,
  play_toclient_tile_entity_data_id,
  play_toclient_block_action_id,
  play_toclient_block_change_id,
  play_toclient_boss_bar_id,
  play_toclient_difficulty_id,
  play_toclient_chat_id,
  play_toclient_multi_block_change_id,
  play_toclient_tab_complete_id,
  play_toclient_declare_commands_id,
  play_toclient_transaction_id,
  play_toclient_close_window_id,
  play_toclient_window_items_id,
  play_toclient_craft_progress_bar_id,
  play_toclient_set_slot_id,
  play_toclient_set_cooldown_id,
  play_toclient_custom_payload_id,
  play_toclient_named_sound_effect_id,
  play_toclient_kick_disconnect_id,
  play_toclient_entity_status_id,
  play_toclient_explosion_id,
  play_toclient_unload_chunk_id,
  play_toclient_game_state_change_id,
  play_toclient_open_horse_window_id,
  play_toclient_keep_alive_id,
  play_toclient_map_chunk_id,
  play_toclient_world_event_id,
  play_toclient_world_particles_id,
  play_toclient_update_light_id,
  play_toclient_login_id,
  play_toclient_map_id,
  play_toclient_trade_list_id,
  play_toclient_rel_entity_move_id,
  play_toclient_entity_move_look_id,
  play_toclient_entity_look_id,
  play_toclient_entity_id,
  play_toclient_vehicle_move_id,
  play_toclient_open_book_id,
  play_toclient_open_window_id,
  play_toclient_open_sign_entity_id,
  play_toclient_craft_recipe_response_id,
  play_toclient_abilities_id,
  play_toclient_combat_event_id,
  play_toclient_player_info_id,
  play_toclient_face_player_id,
  play_toclient_position_id,
  play_toclient_unlock_recipes_id,
  play_toclient_entity_destroy_id,
  play_toclient_remove_entity_effect_id,
  play_toclient_resource_pack_send_id,
  play_toclient_respawn_id,
  play_toclient_entity_head_rotation_id,
  play_toclient_select_advancement_tab_id,
  play_toclient_world_border_id,
  play_toclient_camera_id,
  play_toclient_held_item_slot_id,
  play_toclient_update_view_position_id,
  play_toclient_update_view_distance_id,
  play_toclient_scoreboard_display_objective_id,
  play_toclient_entity_metadata_id,
  play_toclient_attach_entity_id,
  play_toclient_entity_velocity_id,
  play_toclient_entity_equipment_id,
  play_toclient_experience_id,
  play_toclient_update_health_id,
  play_toclient_scoreboard_objective_id,
  play_toclient_set_passengers_id,
  play_toclient_teams_id,
  play_toclient_scoreboard_score_id,
  play_toclient_spawn_position_id,
  play_toclient_update_time_id,
  play_toclient_title_id,
  play_toclient_entity_sound_effect_id,
  play_toclient_sound_effect_id,
  play_toclient_stop_sound_id,
  play_toclient_playerlist_header_id,
  play_toclient_nbt_query_response_id,
  play_toclient_collect_id,
  play_toclient_entity_teleport_id,
  play_toclient_advancements_id,
  play_toclient_entity_update_attributes_id,
  play_toclient_entity_effect_id,
  play_toclient_declare_recipes_id,
  play_toclient_tags_id,
  play_toclient_acknowledge_player_digging_id,
  play_toclient_max
};

enum play_toserver_ids {
  play_toserver_teleport_confirm_id,
  play_toserver_query_block_nbt_id,
  play_toserver_set_difficulty_id,
  play_toserver_chat_id,
  play_toserver_client_command_id,
  play_toserver_settings_id,
  play_toserver_tab_complete_id,
  play_toserver_transaction_id,
  play_toserver_enchant_item_id,
  play_toserver_window_click_id,
  play_toserver_close_window_id,
  play_toserver_custom_payload_id,
  play_toserver_edit_book_id,
  play_toserver_query_entity_nbt_id,
  play_toserver_use_entity_id,
  play_toserver_keep_alive_id,
  play_toserver_lock_difficulty_id,
  play_toserver_position_id,
  play_toserver_position_look_id,
  play_toserver_look_id,
  play_toserver_flying_id,
  play_toserver_vehicle_move_id,
  play_toserver_steer_boat_id,
  play_toserver_pick_item_id,
  play_toserver_craft_recipe_request_id,
  play_toserver_abilities_id,
  play_toserver_block_dig_id,
  play_toserver_entity_action_id,
  play_toserver_steer_vehicle_id,
  play_toserver_crafting_book_data_id,
  play_toserver_name_item_id,
  play_toserver_resource_pack_receive_id,
  play_toserver_advancement_tab_id,
  play_toserver_select_trade_id,
  play_toserver_set_beacon_effect_id,
  play_toserver_held_item_slot_id,
  play_toserver_update_command_block_id,
  play_toserver_update_command_block_minecart_id,
  play_toserver_set_creative_slot_id,
  play_toserver_update_jigsaw_block_id,
  play_toserver_update_structure_block_id,
  play_toserver_update_sign_id,
  play_toserver_arm_animation_id,
  play_toserver_spectate_id,
  play_toserver_block_place_id,
  play_toserver_use_item_id,
  play_toserver_max
};

extern const char *handshaking_toserver_strings[];
extern const char *status_toclient_strings[];
extern const char *login_toclient_strings[];
extern const char *login_toserver_strings[];
extern const char *play_toclient_strings[];
extern const char *play_toserver_strings[];
extern const char **protocol_strings[protocol_state_max][protocol_direction_max];
extern const int protocol_max_ids[protocol_state_max][protocol_direction_max];
void *generic_toclient_decode(int state, int32_t id, char * src, size_t len);


typedef struct {
  int64_t protocol_version;
  sds server_host;
  uint16_t server_port;
  int64_t next_state;
} handshaking_toserver_set_protocol;

int walk_handshaking_toserver_set_protocol(char *source, size_t max_len);
size_t size_handshaking_toserver_set_protocol(handshaking_toserver_set_protocol packet);
char * enc_handshaking_toserver_set_protocol(char *dest, handshaking_toserver_set_protocol source);
char * dec_handshaking_toserver_set_protocol(handshaking_toserver_set_protocol *dest, char *source);
void free_handshaking_toserver_set_protocol(handshaking_toserver_set_protocol packet);

typedef struct {
  uint8_t payload;
} handshaking_toserver_legacy_server_list_ping;

int walk_handshaking_toserver_legacy_server_list_ping(char *source, size_t max_len);
size_t size_handshaking_toserver_legacy_server_list_ping(handshaking_toserver_legacy_server_list_ping packet);
char * enc_handshaking_toserver_legacy_server_list_ping(char *dest, handshaking_toserver_legacy_server_list_ping source);
char * dec_handshaking_toserver_legacy_server_list_ping(handshaking_toserver_legacy_server_list_ping *dest, char *source);

typedef struct {
  sds response;
} status_toclient_server_info;

int walk_status_toclient_server_info(char *source, size_t max_len);
size_t size_status_toclient_server_info(status_toclient_server_info packet);
char * enc_status_toclient_server_info(char *dest, status_toclient_server_info source);
char * dec_status_toclient_server_info(status_toclient_server_info *dest, char *source);
void free_status_toclient_server_info(status_toclient_server_info packet);

typedef struct {
  int64_t time;
} status_toclient_ping;

int walk_status_toclient_ping(char *source, size_t max_len);
size_t size_status_toclient_ping(status_toclient_ping packet);
char * enc_status_toclient_ping(char *dest, status_toclient_ping source);
char * dec_status_toclient_ping(status_toclient_ping *dest, char *source);

typedef struct {
  int64_t time;
} status_toserver_ping;

int walk_status_toserver_ping(char *source, size_t max_len);
size_t size_status_toserver_ping(status_toserver_ping packet);
char * enc_status_toserver_ping(char *dest, status_toserver_ping source);
char * dec_status_toserver_ping(status_toserver_ping *dest, char *source);

typedef struct {
  sds reason;
} login_toclient_disconnect;

int walk_login_toclient_disconnect(char *source, size_t max_len);
size_t size_login_toclient_disconnect(login_toclient_disconnect packet);
char * enc_login_toclient_disconnect(char *dest, login_toclient_disconnect source);
char * dec_login_toclient_disconnect(login_toclient_disconnect *dest, char *source);
void free_login_toclient_disconnect(login_toclient_disconnect packet);

typedef struct {
  sds server_id;
  struct {
    int64_t len;
    char * base;
  } public_key;
  struct {
    int64_t len;
    char * base;
  } verify_token;
} login_toclient_encryption_begin;

int walk_login_toclient_encryption_begin(char *source, size_t max_len);
size_t size_login_toclient_encryption_begin(login_toclient_encryption_begin packet);
char * enc_login_toclient_encryption_begin(char *dest, login_toclient_encryption_begin source);
char * dec_login_toclient_encryption_begin(login_toclient_encryption_begin *dest, char *source);
void free_login_toclient_encryption_begin(login_toclient_encryption_begin packet);

typedef struct {
  sds uuid;
  sds username;
} login_toclient_success;

int walk_login_toclient_success(char *source, size_t max_len);
size_t size_login_toclient_success(login_toclient_success packet);
char * enc_login_toclient_success(char *dest, login_toclient_success source);
char * dec_login_toclient_success(login_toclient_success *dest, char *source);
void free_login_toclient_success(login_toclient_success packet);

typedef struct {
  int64_t threshold;
} login_toclient_compress;

int walk_login_toclient_compress(char *source, size_t max_len);
size_t size_login_toclient_compress(login_toclient_compress packet);
char * enc_login_toclient_compress(char *dest, login_toclient_compress source);
char * dec_login_toclient_compress(login_toclient_compress *dest, char *source);

typedef struct {
  int64_t message_id;
  sds channel;
  struct {
    int64_t len;
    char * base;
  } data;
} login_toclient_login_plugin_request;

int walk_login_toclient_login_plugin_request(char *source, size_t max_len);
size_t size_login_toclient_login_plugin_request(login_toclient_login_plugin_request packet);
char * enc_login_toclient_login_plugin_request(char *dest, login_toclient_login_plugin_request source);
char * dec_login_toclient_login_plugin_request(login_toclient_login_plugin_request *dest, char *source);
void free_login_toclient_login_plugin_request(login_toclient_login_plugin_request packet);

typedef struct {
  sds username;
} login_toserver_login_start;

int walk_login_toserver_login_start(char *source, size_t max_len);
size_t size_login_toserver_login_start(login_toserver_login_start packet);
char * enc_login_toserver_login_start(char *dest, login_toserver_login_start source);
char * dec_login_toserver_login_start(login_toserver_login_start *dest, char *source);
void free_login_toserver_login_start(login_toserver_login_start packet);

typedef struct {
  struct {
    int64_t len;
    char * base;
  } shared_secret;
  struct {
    int64_t len;
    char * base;
  } verify_token;
} login_toserver_encryption_begin;

int walk_login_toserver_encryption_begin(char *source, size_t max_len);
size_t size_login_toserver_encryption_begin(login_toserver_encryption_begin packet);
char * enc_login_toserver_encryption_begin(char *dest, login_toserver_encryption_begin source);
char * dec_login_toserver_encryption_begin(login_toserver_encryption_begin *dest, char *source);
void free_login_toserver_encryption_begin(login_toserver_encryption_begin packet);

typedef struct {
  int64_t message_id;
  uint8_t success;
  struct {
    int64_t len;
    char * base;
  } data;
} login_toserver_login_plugin_response;

int walk_login_toserver_login_plugin_response(char *source, size_t max_len);
size_t size_login_toserver_login_plugin_response(login_toserver_login_plugin_response packet);
char * enc_login_toserver_login_plugin_response(char *dest, login_toserver_login_plugin_response source);
char * dec_login_toserver_login_plugin_response(login_toserver_login_plugin_response *dest, char *source);
void free_login_toserver_login_plugin_response(login_toserver_login_plugin_response packet);

typedef struct {
  int64_t entity_id;
  mc_uuid object_uuid;
  int64_t type;
  double x;
  double y;
  double z;
  int8_t pitch;
  int8_t yaw;
  int32_t object_data;
  int16_t velocity_x;
  int16_t velocity_y;
  int16_t velocity_z;
} play_toclient_spawn_entity;

int walk_play_toclient_spawn_entity(char *source, size_t max_len);
size_t size_play_toclient_spawn_entity(play_toclient_spawn_entity packet);
char * enc_play_toclient_spawn_entity(char *dest, play_toclient_spawn_entity source);
char * dec_play_toclient_spawn_entity(play_toclient_spawn_entity *dest, char *source);

typedef struct {
  int64_t entity_id;
  double x;
  double y;
  double z;
  int16_t count;
} play_toclient_spawn_entity_experience_orb;

int walk_play_toclient_spawn_entity_experience_orb(char *source, size_t max_len);
size_t size_play_toclient_spawn_entity_experience_orb(play_toclient_spawn_entity_experience_orb packet);
char * enc_play_toclient_spawn_entity_experience_orb(char *dest, play_toclient_spawn_entity_experience_orb source);
char * dec_play_toclient_spawn_entity_experience_orb(play_toclient_spawn_entity_experience_orb *dest, char *source);

typedef struct {
  int64_t entity_id;
  int8_t type;
  double x;
  double y;
  double z;
} play_toclient_spawn_entity_weather;

int walk_play_toclient_spawn_entity_weather(char *source, size_t max_len);
size_t size_play_toclient_spawn_entity_weather(play_toclient_spawn_entity_weather packet);
char * enc_play_toclient_spawn_entity_weather(char *dest, play_toclient_spawn_entity_weather source);
char * dec_play_toclient_spawn_entity_weather(play_toclient_spawn_entity_weather *dest, char *source);

typedef struct {
  int64_t entity_id;
  mc_uuid entity_uuid;
  int64_t type;
  double x;
  double y;
  double z;
  int8_t yaw;
  int8_t pitch;
  int8_t head_pitch;
  int16_t velocity_x;
  int16_t velocity_y;
  int16_t velocity_z;
  mc_metadata metadata;
} play_toclient_spawn_entity_living;

int walk_play_toclient_spawn_entity_living(char *source, size_t max_len);
size_t size_play_toclient_spawn_entity_living(play_toclient_spawn_entity_living packet);
char * enc_play_toclient_spawn_entity_living(char *dest, play_toclient_spawn_entity_living source);
char * dec_play_toclient_spawn_entity_living(play_toclient_spawn_entity_living *dest, char *source);
void free_play_toclient_spawn_entity_living(play_toclient_spawn_entity_living packet);

typedef struct {
  int64_t entity_id;
  mc_uuid entity_uuid;
  int64_t title;
  mc_position location;
  uint8_t direction;
} play_toclient_spawn_entity_painting;

int walk_play_toclient_spawn_entity_painting(char *source, size_t max_len);
size_t size_play_toclient_spawn_entity_painting(play_toclient_spawn_entity_painting packet);
char * enc_play_toclient_spawn_entity_painting(char *dest, play_toclient_spawn_entity_painting source);
char * dec_play_toclient_spawn_entity_painting(play_toclient_spawn_entity_painting *dest, char *source);

typedef struct {
  int64_t entity_id;
  mc_uuid player_uuid;
  double x;
  double y;
  double z;
  int8_t yaw;
  int8_t pitch;
  mc_metadata metadata;
} play_toclient_named_entity_spawn;

int walk_play_toclient_named_entity_spawn(char *source, size_t max_len);
size_t size_play_toclient_named_entity_spawn(play_toclient_named_entity_spawn packet);
char * enc_play_toclient_named_entity_spawn(char *dest, play_toclient_named_entity_spawn source);
char * dec_play_toclient_named_entity_spawn(play_toclient_named_entity_spawn *dest, char *source);
void free_play_toclient_named_entity_spawn(play_toclient_named_entity_spawn packet);

typedef struct {
  int64_t entity_id;
  uint8_t animation;
} play_toclient_animation;

int walk_play_toclient_animation(char *source, size_t max_len);
size_t size_play_toclient_animation(play_toclient_animation packet);
char * enc_play_toclient_animation(char *dest, play_toclient_animation source);
char * dec_play_toclient_animation(play_toclient_animation *dest, char *source);

typedef struct {
  struct {
    int64_t count;
    struct {
      int64_t category_id;
      int64_t statistic_id;
      int64_t value;
    } *base;
  } entries;
} play_toclient_statistics;

int walk_play_toclient_statistics(char *source, size_t max_len);
size_t size_play_toclient_statistics(play_toclient_statistics packet);
char * enc_play_toclient_statistics(char *dest, play_toclient_statistics source);
char * dec_play_toclient_statistics(play_toclient_statistics *dest, char *source);
void free_play_toclient_statistics(play_toclient_statistics packet);

typedef struct {
  uint8_t reset;
  struct {
    int64_t count;
    struct {
      sds key;
      struct {
        struct {
          uint8_t opt;
          sds val;
        } parent_id;
        struct {
          uint8_t opt;
          struct {
            sds title;
            sds description;
            mc_slot icon;
            int64_t frame_type;
            struct {
              uint8_t hidden;
              uint8_t show_toast;
              uint8_t has_background_texture;
            } flags;
            sds background_texture;
            float x_cord;
            float y_cord;
          } val;
        } display_data;
        struct {
          int64_t count;
          struct {
            sds key;
            // 'value' is a void type
          } *base;
        } criteria;
        struct {
          int64_t count;
          struct {
            int64_t count;
            sds *base;
          } *base;
        } requirements;
      } value;
    } *base;
  } advancement_mapping;
  struct {
    int64_t count;
    sds *base;
  } identifiers;
  struct {
    int64_t count;
    struct {
      sds key;
      struct {
        int64_t count;
        struct {
          sds criterion_identifier;
          struct {
            uint8_t opt;
            int64_t val;
          } criterion_progress;
        } *base;
      } value;
    } *base;
  } progress_mapping;
} play_toclient_advancements;

int walk_play_toclient_advancements(char *source, size_t max_len);
size_t size_play_toclient_advancements(play_toclient_advancements packet);
char * enc_play_toclient_advancements(char *dest, play_toclient_advancements source);
char * dec_play_toclient_advancements(play_toclient_advancements *dest, char *source);
void free_play_toclient_advancements(play_toclient_advancements packet);

typedef struct {
  int64_t entity_id;
  mc_position location;
  int8_t destroy_stage;
} play_toclient_block_break_animation;

int walk_play_toclient_block_break_animation(char *source, size_t max_len);
size_t size_play_toclient_block_break_animation(play_toclient_block_break_animation packet);
char * enc_play_toclient_block_break_animation(char *dest, play_toclient_block_break_animation source);
char * dec_play_toclient_block_break_animation(play_toclient_block_break_animation *dest, char *source);

typedef struct {
  mc_position location;
  uint8_t action;
  nbt_node * nbt_data;
} play_toclient_tile_entity_data;

int walk_play_toclient_tile_entity_data(char *source, size_t max_len);
size_t size_play_toclient_tile_entity_data(play_toclient_tile_entity_data packet);
char * enc_play_toclient_tile_entity_data(char *dest, play_toclient_tile_entity_data source);
char * dec_play_toclient_tile_entity_data(play_toclient_tile_entity_data *dest, char *source);
void free_play_toclient_tile_entity_data(play_toclient_tile_entity_data packet);

typedef struct {
  mc_position location;
  uint8_t byte1;
  uint8_t byte2;
  int64_t block_id;
} play_toclient_block_action;

int walk_play_toclient_block_action(char *source, size_t max_len);
size_t size_play_toclient_block_action(play_toclient_block_action packet);
char * enc_play_toclient_block_action(char *dest, play_toclient_block_action source);
char * dec_play_toclient_block_action(play_toclient_block_action *dest, char *source);

typedef struct {
  mc_position location;
  int64_t type;
} play_toclient_block_change;

int walk_play_toclient_block_change(char *source, size_t max_len);
size_t size_play_toclient_block_change(play_toclient_block_change packet);
char * enc_play_toclient_block_change(char *dest, play_toclient_block_change source);
char * dec_play_toclient_block_change(play_toclient_block_change *dest, char *source);

typedef struct {
  mc_uuid entity_uuid;
  int64_t action;
  sds title;
  float health;
  int64_t color;
  int64_t dividers;
  uint8_t flags;
} play_toclient_boss_bar;

int walk_play_toclient_boss_bar(char *source, size_t max_len);
size_t size_play_toclient_boss_bar(play_toclient_boss_bar packet);
char * enc_play_toclient_boss_bar(char *dest, play_toclient_boss_bar source);
char * dec_play_toclient_boss_bar(play_toclient_boss_bar *dest, char *source);
void free_play_toclient_boss_bar(play_toclient_boss_bar packet);

typedef struct {
  uint8_t difficulty;
  uint8_t difficulty_locked;
} play_toclient_difficulty;

int walk_play_toclient_difficulty(char *source, size_t max_len);
size_t size_play_toclient_difficulty(play_toclient_difficulty packet);
char * enc_play_toclient_difficulty(char *dest, play_toclient_difficulty source);
char * dec_play_toclient_difficulty(play_toclient_difficulty *dest, char *source);

typedef struct {
  int64_t transaction_id;
  int64_t start;
  int64_t length;
  struct {
    int64_t count;
    struct {
      sds match;
      struct {
        uint8_t opt;
        sds val;
      } tooltip;
    } *base;
  } matches;
} play_toclient_tab_complete;

int walk_play_toclient_tab_complete(char *source, size_t max_len);
size_t size_play_toclient_tab_complete(play_toclient_tab_complete packet);
char * enc_play_toclient_tab_complete(char *dest, play_toclient_tab_complete source);
char * dec_play_toclient_tab_complete(play_toclient_tab_complete *dest, char *source);
void free_play_toclient_tab_complete(play_toclient_tab_complete packet);

typedef struct {
  struct {
    int64_t count;
    struct {
      struct {
        uint8_t has_custom_suggestions;
        uint8_t has_redirect_node;
        uint8_t has_command;
        uint8_t command_node_type;
      } flags;
      struct {
        int64_t count;
        int64_t *base;
      } children;
      int64_t redirect_node;
      union {
        sds enum_1;
        struct {
          sds name;
          sds parser;
          union {
            struct {
              struct {
                uint8_t max_present;
                uint8_t min_present;
              } flags;
              double min;
              double max;
            } enum_brigadier_double;
            struct {
              struct {
                uint8_t max_present;
                uint8_t min_present;
              } flags;
              float min;
              float max;
            } enum_brigadier_float;
            struct {
              struct {
                uint8_t max_present;
                uint8_t min_present;
              } flags;
              int32_t min;
              int32_t max;
            } enum_brigadier_integer;
            int64_t enum_brigadier_string;
            int8_t enum_minecraft_entity;
            int8_t enum_minecraft_score_holder;
          } properties;
          sds suggests;
        } enum_2;
      } extra_node_data;
    } *base;
  } nodes;
  int64_t root_index;
} play_toclient_declare_commands;

int walk_play_toclient_declare_commands(char *source, size_t max_len);
size_t size_play_toclient_declare_commands(play_toclient_declare_commands packet);
char * enc_play_toclient_declare_commands(char *dest, play_toclient_declare_commands source);
char * dec_play_toclient_declare_commands(play_toclient_declare_commands *dest, char *source);
void free_play_toclient_declare_commands(play_toclient_declare_commands packet);

typedef struct {
  sds feet_eyes;
  double x;
  double y;
  double z;
  uint8_t is_entity;
  int64_t entity_id;
  sds entity_feet_eyes;
} play_toclient_face_player;

int walk_play_toclient_face_player(char *source, size_t max_len);
size_t size_play_toclient_face_player(play_toclient_face_player packet);
char * enc_play_toclient_face_player(char *dest, play_toclient_face_player source);
char * dec_play_toclient_face_player(play_toclient_face_player *dest, char *source);
void free_play_toclient_face_player(play_toclient_face_player packet);

typedef struct {
  int64_t transaction_id;
  nbt_node * nbt;
} play_toclient_nbt_query_response;

int walk_play_toclient_nbt_query_response(char *source, size_t max_len);
size_t size_play_toclient_nbt_query_response(play_toclient_nbt_query_response packet);
char * enc_play_toclient_nbt_query_response(char *dest, play_toclient_nbt_query_response source);
char * dec_play_toclient_nbt_query_response(play_toclient_nbt_query_response *dest, char *source);
void free_play_toclient_nbt_query_response(play_toclient_nbt_query_response packet);

typedef struct {
  sds message;
  int8_t position;
} play_toclient_chat;

int walk_play_toclient_chat(char *source, size_t max_len);
size_t size_play_toclient_chat(play_toclient_chat packet);
char * enc_play_toclient_chat(char *dest, play_toclient_chat source);
char * dec_play_toclient_chat(play_toclient_chat *dest, char *source);
void free_play_toclient_chat(play_toclient_chat packet);

typedef struct {
  int32_t chunk_x;
  int32_t chunk_z;
  struct {
    int64_t count;
    struct {
      uint8_t horizontal_pos;
      uint8_t y;
      int64_t block_id;
    } *base;
  } records;
} play_toclient_multi_block_change;

int walk_play_toclient_multi_block_change(char *source, size_t max_len);
size_t size_play_toclient_multi_block_change(play_toclient_multi_block_change packet);
char * enc_play_toclient_multi_block_change(char *dest, play_toclient_multi_block_change source);
char * dec_play_toclient_multi_block_change(play_toclient_multi_block_change *dest, char *source);
void free_play_toclient_multi_block_change(play_toclient_multi_block_change packet);

typedef struct {
  int8_t window_id;
  int16_t action;
  uint8_t accepted;
} play_toclient_transaction;

int walk_play_toclient_transaction(char *source, size_t max_len);
size_t size_play_toclient_transaction(play_toclient_transaction packet);
char * enc_play_toclient_transaction(char *dest, play_toclient_transaction source);
char * dec_play_toclient_transaction(play_toclient_transaction *dest, char *source);

typedef struct {
  uint8_t window_id;
} play_toclient_close_window;

int walk_play_toclient_close_window(char *source, size_t max_len);
size_t size_play_toclient_close_window(play_toclient_close_window packet);
char * enc_play_toclient_close_window(char *dest, play_toclient_close_window source);
char * dec_play_toclient_close_window(play_toclient_close_window *dest, char *source);

typedef struct {
  int64_t window_id;
  int64_t inventory_type;
  sds window_title;
} play_toclient_open_window;

int walk_play_toclient_open_window(char *source, size_t max_len);
size_t size_play_toclient_open_window(play_toclient_open_window packet);
char * enc_play_toclient_open_window(char *dest, play_toclient_open_window source);
char * dec_play_toclient_open_window(play_toclient_open_window *dest, char *source);
void free_play_toclient_open_window(play_toclient_open_window packet);

typedef struct {
  uint8_t window_id;
  struct {
    int16_t count;
    mc_slot *base;
  } items;
} play_toclient_window_items;

int walk_play_toclient_window_items(char *source, size_t max_len);
size_t size_play_toclient_window_items(play_toclient_window_items packet);
char * enc_play_toclient_window_items(char *dest, play_toclient_window_items source);
char * dec_play_toclient_window_items(play_toclient_window_items *dest, char *source);
void free_play_toclient_window_items(play_toclient_window_items packet);

typedef struct {
  uint8_t window_id;
  int16_t property;
  int16_t value;
} play_toclient_craft_progress_bar;

int walk_play_toclient_craft_progress_bar(char *source, size_t max_len);
size_t size_play_toclient_craft_progress_bar(play_toclient_craft_progress_bar packet);
char * enc_play_toclient_craft_progress_bar(char *dest, play_toclient_craft_progress_bar source);
char * dec_play_toclient_craft_progress_bar(play_toclient_craft_progress_bar *dest, char *source);

typedef struct {
  int8_t window_id;
  int16_t slot;
  mc_slot item;
} play_toclient_set_slot;

int walk_play_toclient_set_slot(char *source, size_t max_len);
size_t size_play_toclient_set_slot(play_toclient_set_slot packet);
char * enc_play_toclient_set_slot(char *dest, play_toclient_set_slot source);
char * dec_play_toclient_set_slot(play_toclient_set_slot *dest, char *source);
void free_play_toclient_set_slot(play_toclient_set_slot packet);

typedef struct {
  int64_t item_id;
  int64_t cooldown_ticks;
} play_toclient_set_cooldown;

int walk_play_toclient_set_cooldown(char *source, size_t max_len);
size_t size_play_toclient_set_cooldown(play_toclient_set_cooldown packet);
char * enc_play_toclient_set_cooldown(char *dest, play_toclient_set_cooldown source);
char * dec_play_toclient_set_cooldown(play_toclient_set_cooldown *dest, char *source);

typedef struct {
  sds channel;
  mc_buffer data;
} play_toclient_custom_payload;

int walk_play_toclient_custom_payload(char *source, size_t max_len);
size_t size_play_toclient_custom_payload(play_toclient_custom_payload packet);
char * enc_play_toclient_custom_payload(char *dest, play_toclient_custom_payload source);
char * dec_play_toclient_custom_payload(play_toclient_custom_payload *dest, char *source, size_t total_size);
void free_play_toclient_custom_payload(play_toclient_custom_payload packet);

typedef struct {
  sds sound_name;
  int64_t sound_category;
  int32_t x;
  int32_t y;
  int32_t z;
  float volume;
  float pitch;
} play_toclient_named_sound_effect;

int walk_play_toclient_named_sound_effect(char *source, size_t max_len);
size_t size_play_toclient_named_sound_effect(play_toclient_named_sound_effect packet);
char * enc_play_toclient_named_sound_effect(char *dest, play_toclient_named_sound_effect source);
char * dec_play_toclient_named_sound_effect(play_toclient_named_sound_effect *dest, char *source);
void free_play_toclient_named_sound_effect(play_toclient_named_sound_effect packet);

typedef struct {
  sds reason;
} play_toclient_kick_disconnect;

int walk_play_toclient_kick_disconnect(char *source, size_t max_len);
size_t size_play_toclient_kick_disconnect(play_toclient_kick_disconnect packet);
char * enc_play_toclient_kick_disconnect(char *dest, play_toclient_kick_disconnect source);
char * dec_play_toclient_kick_disconnect(play_toclient_kick_disconnect *dest, char *source);
void free_play_toclient_kick_disconnect(play_toclient_kick_disconnect packet);

typedef struct {
  int32_t entity_id;
  int8_t entity_status;
} play_toclient_entity_status;

int walk_play_toclient_entity_status(char *source, size_t max_len);
size_t size_play_toclient_entity_status(play_toclient_entity_status packet);
char * enc_play_toclient_entity_status(char *dest, play_toclient_entity_status source);
char * dec_play_toclient_entity_status(play_toclient_entity_status *dest, char *source);

typedef struct {
  float x;
  float y;
  float z;
  float radius;
  struct {
    int32_t count;
    struct {
      int8_t x;
      int8_t y;
      int8_t z;
    } *base;
  } affected_block_offsets;
  float player_motion_x;
  float player_motion_y;
  float player_motion_z;
} play_toclient_explosion;

int walk_play_toclient_explosion(char *source, size_t max_len);
size_t size_play_toclient_explosion(play_toclient_explosion packet);
char * enc_play_toclient_explosion(char *dest, play_toclient_explosion source);
char * dec_play_toclient_explosion(play_toclient_explosion *dest, char *source);
void free_play_toclient_explosion(play_toclient_explosion packet);

typedef struct {
  int32_t chunk_x;
  int32_t chunk_z;
} play_toclient_unload_chunk;

int walk_play_toclient_unload_chunk(char *source, size_t max_len);
size_t size_play_toclient_unload_chunk(play_toclient_unload_chunk packet);
char * enc_play_toclient_unload_chunk(char *dest, play_toclient_unload_chunk source);
char * dec_play_toclient_unload_chunk(play_toclient_unload_chunk *dest, char *source);

typedef struct {
  uint8_t reason;
  float game_mode;
} play_toclient_game_state_change;

int walk_play_toclient_game_state_change(char *source, size_t max_len);
size_t size_play_toclient_game_state_change(play_toclient_game_state_change packet);
char * enc_play_toclient_game_state_change(char *dest, play_toclient_game_state_change source);
char * dec_play_toclient_game_state_change(play_toclient_game_state_change *dest, char *source);

typedef struct {
  uint8_t window_id;
  int64_t nb_slots;
  int32_t entity_id;
} play_toclient_open_horse_window;

int walk_play_toclient_open_horse_window(char *source, size_t max_len);
size_t size_play_toclient_open_horse_window(play_toclient_open_horse_window packet);
char * enc_play_toclient_open_horse_window(char *dest, play_toclient_open_horse_window source);
char * dec_play_toclient_open_horse_window(play_toclient_open_horse_window *dest, char *source);

typedef struct {
  int64_t keep_alive_id;
} play_toclient_keep_alive;

int walk_play_toclient_keep_alive(char *source, size_t max_len);
size_t size_play_toclient_keep_alive(play_toclient_keep_alive packet);
char * enc_play_toclient_keep_alive(char *dest, play_toclient_keep_alive source);
char * dec_play_toclient_keep_alive(play_toclient_keep_alive *dest, char *source);

typedef struct {
  int32_t x;
  int32_t z;
  uint8_t ground_up;
  int64_t bit_map;
  nbt_node * heightmaps;
  struct {
    int64_t len;
    char * base;
  } chunk_data;
  struct {
    int64_t count;
    nbt_node * *base;
  } block_entities;
} play_toclient_map_chunk;

int walk_play_toclient_map_chunk(char *source, size_t max_len);
size_t size_play_toclient_map_chunk(play_toclient_map_chunk packet);
char * enc_play_toclient_map_chunk(char *dest, play_toclient_map_chunk source);
char * dec_play_toclient_map_chunk(play_toclient_map_chunk *dest, char *source);
void free_play_toclient_map_chunk(play_toclient_map_chunk packet);

typedef struct {
  int32_t effect_id;
  mc_position location;
  int32_t data;
  uint8_t global;
} play_toclient_world_event;

int walk_play_toclient_world_event(char *source, size_t max_len);
size_t size_play_toclient_world_event(play_toclient_world_event packet);
char * enc_play_toclient_world_event(char *dest, play_toclient_world_event source);
char * dec_play_toclient_world_event(play_toclient_world_event *dest, char *source);

typedef struct {
  int32_t particle_id;
  uint8_t long_distance;
  float x;
  float y;
  float z;
  float offset_x;
  float offset_y;
  float offset_z;
  float particle_data;
  int32_t particles;
  mc_particle data;
} play_toclient_world_particles;

int walk_play_toclient_world_particles(char *source, size_t max_len);
size_t size_play_toclient_world_particles(play_toclient_world_particles packet);
char * enc_play_toclient_world_particles(char *dest, play_toclient_world_particles source);
char * dec_play_toclient_world_particles(play_toclient_world_particles *dest, char *source);
void free_play_toclient_world_particles(play_toclient_world_particles packet);

typedef struct {
  int64_t chunk_x;
  int64_t chunk_z;
  int64_t sky_light_mask;
  int64_t block_light_mask;
  int64_t empty_sky_light_mask;
  int64_t empty_block_light_mask;
  mc_buffer data;
} play_toclient_update_light;

int walk_play_toclient_update_light(char *source, size_t max_len);
size_t size_play_toclient_update_light(play_toclient_update_light packet);
char * enc_play_toclient_update_light(char *dest, play_toclient_update_light source);
char * dec_play_toclient_update_light(play_toclient_update_light *dest, char *source, size_t total_size);
void free_play_toclient_update_light(play_toclient_update_light packet);

typedef struct {
  int32_t entity_id;
  uint8_t game_mode;
  int32_t dimension;
  uint8_t max_players;
  sds level_type;
  int64_t view_distance;
  uint8_t reduced_debug_info;
} play_toclient_login;

int walk_play_toclient_login(char *source, size_t max_len);
size_t size_play_toclient_login(play_toclient_login packet);
char * enc_play_toclient_login(char *dest, play_toclient_login source);
char * dec_play_toclient_login(play_toclient_login *dest, char *source);
void free_play_toclient_login(play_toclient_login packet);

typedef struct {
  int64_t item_damage;
  int8_t scale;
  uint8_t tracking_position;
  uint8_t locked;
  struct {
    int64_t count;
    struct {
      int64_t type;
      int8_t x;
      int8_t y;
      uint8_t direction;
      struct {
        uint8_t opt;
        sds val;
      } display_name;
    } *base;
  } icons;
  int8_t columns;
  int8_t rows;
  int8_t x;
  int8_t y;
  struct {
    int64_t len;
    char * base;
  } data;
} play_toclient_map;

int walk_play_toclient_map(char *source, size_t max_len);
size_t size_play_toclient_map(play_toclient_map packet);
char * enc_play_toclient_map(char *dest, play_toclient_map source);
char * dec_play_toclient_map(play_toclient_map *dest, char *source);
void free_play_toclient_map(play_toclient_map packet);

typedef struct {
  int64_t window_id;
  struct {
    uint8_t count;
    struct {
      mc_slot input_item1;
      mc_slot output_item;
      struct {
        uint8_t opt;
        mc_slot val;
      } input_item2;
      uint8_t trade_disabled;
      int32_t nb_trade_uses;
      int32_t maximum_nb_trade_uses;
      int32_t xp;
      int32_t special_price;
      float price_multiplier;
      int32_t demand;
    } *base;
  } trades;
  int64_t villager_level;
  int64_t experience;
  uint8_t is_regular_villager;
  uint8_t can_restock;
} play_toclient_trade_list;

int walk_play_toclient_trade_list(char *source, size_t max_len);
size_t size_play_toclient_trade_list(play_toclient_trade_list packet);
char * enc_play_toclient_trade_list(char *dest, play_toclient_trade_list source);
char * dec_play_toclient_trade_list(play_toclient_trade_list *dest, char *source);
void free_play_toclient_trade_list(play_toclient_trade_list packet);

typedef struct {
  int64_t entity_id;
  int16_t d_x;
  int16_t d_y;
  int16_t d_z;
  uint8_t on_ground;
} play_toclient_rel_entity_move;

int walk_play_toclient_rel_entity_move(char *source, size_t max_len);
size_t size_play_toclient_rel_entity_move(play_toclient_rel_entity_move packet);
char * enc_play_toclient_rel_entity_move(char *dest, play_toclient_rel_entity_move source);
char * dec_play_toclient_rel_entity_move(play_toclient_rel_entity_move *dest, char *source);

typedef struct {
  int64_t entity_id;
  int16_t d_x;
  int16_t d_y;
  int16_t d_z;
  int8_t yaw;
  int8_t pitch;
  uint8_t on_ground;
} play_toclient_entity_move_look;

int walk_play_toclient_entity_move_look(char *source, size_t max_len);
size_t size_play_toclient_entity_move_look(play_toclient_entity_move_look packet);
char * enc_play_toclient_entity_move_look(char *dest, play_toclient_entity_move_look source);
char * dec_play_toclient_entity_move_look(play_toclient_entity_move_look *dest, char *source);

typedef struct {
  int64_t entity_id;
  int8_t yaw;
  int8_t pitch;
  uint8_t on_ground;
} play_toclient_entity_look;

int walk_play_toclient_entity_look(char *source, size_t max_len);
size_t size_play_toclient_entity_look(play_toclient_entity_look packet);
char * enc_play_toclient_entity_look(char *dest, play_toclient_entity_look source);
char * dec_play_toclient_entity_look(play_toclient_entity_look *dest, char *source);

typedef struct {
  int64_t entity_id;
} play_toclient_entity;

int walk_play_toclient_entity(char *source, size_t max_len);
size_t size_play_toclient_entity(play_toclient_entity packet);
char * enc_play_toclient_entity(char *dest, play_toclient_entity source);
char * dec_play_toclient_entity(play_toclient_entity *dest, char *source);

typedef struct {
  double x;
  double y;
  double z;
  float yaw;
  float pitch;
} play_toclient_vehicle_move;

int walk_play_toclient_vehicle_move(char *source, size_t max_len);
size_t size_play_toclient_vehicle_move(play_toclient_vehicle_move packet);
char * enc_play_toclient_vehicle_move(char *dest, play_toclient_vehicle_move source);
char * dec_play_toclient_vehicle_move(play_toclient_vehicle_move *dest, char *source);

typedef struct {
  int64_t hand;
} play_toclient_open_book;

int walk_play_toclient_open_book(char *source, size_t max_len);
size_t size_play_toclient_open_book(play_toclient_open_book packet);
char * enc_play_toclient_open_book(char *dest, play_toclient_open_book source);
char * dec_play_toclient_open_book(play_toclient_open_book *dest, char *source);

typedef struct {
  mc_position location;
} play_toclient_open_sign_entity;

int walk_play_toclient_open_sign_entity(char *source, size_t max_len);
size_t size_play_toclient_open_sign_entity(play_toclient_open_sign_entity packet);
char * enc_play_toclient_open_sign_entity(char *dest, play_toclient_open_sign_entity source);
char * dec_play_toclient_open_sign_entity(play_toclient_open_sign_entity *dest, char *source);

typedef struct {
  int8_t window_id;
  sds recipe;
} play_toclient_craft_recipe_response;

int walk_play_toclient_craft_recipe_response(char *source, size_t max_len);
size_t size_play_toclient_craft_recipe_response(play_toclient_craft_recipe_response packet);
char * enc_play_toclient_craft_recipe_response(char *dest, play_toclient_craft_recipe_response source);
char * dec_play_toclient_craft_recipe_response(play_toclient_craft_recipe_response *dest, char *source);
void free_play_toclient_craft_recipe_response(play_toclient_craft_recipe_response packet);

typedef struct {
  int8_t flags;
  float flying_speed;
  float walking_speed;
} play_toclient_abilities;

int walk_play_toclient_abilities(char *source, size_t max_len);
size_t size_play_toclient_abilities(play_toclient_abilities packet);
char * enc_play_toclient_abilities(char *dest, play_toclient_abilities source);
char * dec_play_toclient_abilities(play_toclient_abilities *dest, char *source);

typedef struct {
  int64_t event;
  int64_t duration;
  int64_t player_id;
  int32_t entity_id;
  sds message;
} play_toclient_combat_event;

int walk_play_toclient_combat_event(char *source, size_t max_len);
size_t size_play_toclient_combat_event(play_toclient_combat_event packet);
char * enc_play_toclient_combat_event(char *dest, play_toclient_combat_event source);
char * dec_play_toclient_combat_event(play_toclient_combat_event *dest, char *source);
void free_play_toclient_combat_event(play_toclient_combat_event packet);

typedef struct {
  int64_t action;
  struct {
    int64_t count;
    struct {
      mc_uuid uuid;
      sds name;
      struct {
        int64_t count;
        struct {
          sds name;
          sds value;
          struct {
            uint8_t opt;
            sds val;
          } signature;
        } *base;
      } properties;
      int64_t gamemode;
      int64_t ping;
      struct {
        uint8_t opt;
        sds val;
      } display_name;
    } *base;
  } data;
} play_toclient_player_info;

int walk_play_toclient_player_info(char *source, size_t max_len);
size_t size_play_toclient_player_info(play_toclient_player_info packet);
char * enc_play_toclient_player_info(char *dest, play_toclient_player_info source);
char * dec_play_toclient_player_info(play_toclient_player_info *dest, char *source);
void free_play_toclient_player_info(play_toclient_player_info packet);

typedef struct {
  double x;
  double y;
  double z;
  float yaw;
  float pitch;
  int8_t flags;
  int64_t teleport_id;
} play_toclient_position;

int walk_play_toclient_position(char *source, size_t max_len);
size_t size_play_toclient_position(play_toclient_position packet);
char * enc_play_toclient_position(char *dest, play_toclient_position source);
char * dec_play_toclient_position(play_toclient_position *dest, char *source);

typedef struct {
  int64_t action;
  uint8_t crafting_book_open;
  uint8_t filtering_craftable;
  uint8_t smelting_book_open;
  uint8_t filtering_smeltable;
  struct {
    int64_t count;
    sds *base;
  } recipes1;
  struct {
    int64_t count;
    sds *base;
  } recipes2;
} play_toclient_unlock_recipes;

int walk_play_toclient_unlock_recipes(char *source, size_t max_len);
size_t size_play_toclient_unlock_recipes(play_toclient_unlock_recipes packet);
char * enc_play_toclient_unlock_recipes(char *dest, play_toclient_unlock_recipes source);
char * dec_play_toclient_unlock_recipes(play_toclient_unlock_recipes *dest, char *source);
void free_play_toclient_unlock_recipes(play_toclient_unlock_recipes packet);

typedef struct {
  struct {
    int64_t count;
    int64_t *base;
  } entity_ids;
} play_toclient_entity_destroy;

int walk_play_toclient_entity_destroy(char *source, size_t max_len);
size_t size_play_toclient_entity_destroy(play_toclient_entity_destroy packet);
char * enc_play_toclient_entity_destroy(char *dest, play_toclient_entity_destroy source);
char * dec_play_toclient_entity_destroy(play_toclient_entity_destroy *dest, char *source);
void free_play_toclient_entity_destroy(play_toclient_entity_destroy packet);

typedef struct {
  int64_t entity_id;
  int8_t effect_id;
} play_toclient_remove_entity_effect;

int walk_play_toclient_remove_entity_effect(char *source, size_t max_len);
size_t size_play_toclient_remove_entity_effect(play_toclient_remove_entity_effect packet);
char * enc_play_toclient_remove_entity_effect(char *dest, play_toclient_remove_entity_effect source);
char * dec_play_toclient_remove_entity_effect(play_toclient_remove_entity_effect *dest, char *source);

typedef struct {
  sds url;
  sds hash;
} play_toclient_resource_pack_send;

int walk_play_toclient_resource_pack_send(char *source, size_t max_len);
size_t size_play_toclient_resource_pack_send(play_toclient_resource_pack_send packet);
char * enc_play_toclient_resource_pack_send(char *dest, play_toclient_resource_pack_send source);
char * dec_play_toclient_resource_pack_send(play_toclient_resource_pack_send *dest, char *source);
void free_play_toclient_resource_pack_send(play_toclient_resource_pack_send packet);

typedef struct {
  int32_t dimension;
  uint8_t gamemode;
  sds level_type;
} play_toclient_respawn;

int walk_play_toclient_respawn(char *source, size_t max_len);
size_t size_play_toclient_respawn(play_toclient_respawn packet);
char * enc_play_toclient_respawn(char *dest, play_toclient_respawn source);
char * dec_play_toclient_respawn(play_toclient_respawn *dest, char *source);
void free_play_toclient_respawn(play_toclient_respawn packet);

typedef struct {
  int64_t entity_id;
  struct {
    int32_t count;
    struct {
      sds key;
      double value;
      struct {
        int64_t count;
        struct {
          mc_uuid uuid;
          double amount;
          int8_t operation;
        } *base;
      } modifiers;
    } *base;
  } properties;
} play_toclient_entity_update_attributes;

int walk_play_toclient_entity_update_attributes(char *source, size_t max_len);
size_t size_play_toclient_entity_update_attributes(play_toclient_entity_update_attributes packet);
char * enc_play_toclient_entity_update_attributes(char *dest, play_toclient_entity_update_attributes source);
char * dec_play_toclient_entity_update_attributes(play_toclient_entity_update_attributes *dest, char *source);
void free_play_toclient_entity_update_attributes(play_toclient_entity_update_attributes packet);

typedef struct {
  int64_t action;
  double radius;
  double x;
  double z;
  double old_radius;
  double new_radius;
  int64_t speed;
  int64_t portal_boundary;
  int64_t warning_time;
  int64_t warning_blocks;
} play_toclient_world_border;

int walk_play_toclient_world_border(char *source, size_t max_len);
size_t size_play_toclient_world_border(play_toclient_world_border packet);
char * enc_play_toclient_world_border(char *dest, play_toclient_world_border source);
char * dec_play_toclient_world_border(play_toclient_world_border *dest, char *source);

typedef struct {
  int64_t camera_id;
} play_toclient_camera;

int walk_play_toclient_camera(char *source, size_t max_len);
size_t size_play_toclient_camera(play_toclient_camera packet);
char * enc_play_toclient_camera(char *dest, play_toclient_camera source);
char * dec_play_toclient_camera(play_toclient_camera *dest, char *source);

typedef struct {
  int8_t slot;
} play_toclient_held_item_slot;

int walk_play_toclient_held_item_slot(char *source, size_t max_len);
size_t size_play_toclient_held_item_slot(play_toclient_held_item_slot packet);
char * enc_play_toclient_held_item_slot(char *dest, play_toclient_held_item_slot source);
char * dec_play_toclient_held_item_slot(play_toclient_held_item_slot *dest, char *source);

typedef struct {
  int64_t chunk_x;
  int64_t chunk_z;
} play_toclient_update_view_position;

int walk_play_toclient_update_view_position(char *source, size_t max_len);
size_t size_play_toclient_update_view_position(play_toclient_update_view_position packet);
char * enc_play_toclient_update_view_position(char *dest, play_toclient_update_view_position source);
char * dec_play_toclient_update_view_position(play_toclient_update_view_position *dest, char *source);

typedef struct {
  int64_t view_distance;
} play_toclient_update_view_distance;

int walk_play_toclient_update_view_distance(char *source, size_t max_len);
size_t size_play_toclient_update_view_distance(play_toclient_update_view_distance packet);
char * enc_play_toclient_update_view_distance(char *dest, play_toclient_update_view_distance source);
char * dec_play_toclient_update_view_distance(play_toclient_update_view_distance *dest, char *source);

typedef struct {
  int8_t position;
  sds name;
} play_toclient_scoreboard_display_objective;

int walk_play_toclient_scoreboard_display_objective(char *source, size_t max_len);
size_t size_play_toclient_scoreboard_display_objective(play_toclient_scoreboard_display_objective packet);
char * enc_play_toclient_scoreboard_display_objective(char *dest, play_toclient_scoreboard_display_objective source);
char * dec_play_toclient_scoreboard_display_objective(play_toclient_scoreboard_display_objective *dest, char *source);
void free_play_toclient_scoreboard_display_objective(play_toclient_scoreboard_display_objective packet);

typedef struct {
  int64_t entity_id;
  mc_metadata metadata;
} play_toclient_entity_metadata;

int walk_play_toclient_entity_metadata(char *source, size_t max_len);
size_t size_play_toclient_entity_metadata(play_toclient_entity_metadata packet);
char * enc_play_toclient_entity_metadata(char *dest, play_toclient_entity_metadata source);
char * dec_play_toclient_entity_metadata(play_toclient_entity_metadata *dest, char *source);
void free_play_toclient_entity_metadata(play_toclient_entity_metadata packet);

typedef struct {
  int32_t entity_id;
  int32_t vehicle_id;
} play_toclient_attach_entity;

int walk_play_toclient_attach_entity(char *source, size_t max_len);
size_t size_play_toclient_attach_entity(play_toclient_attach_entity packet);
char * enc_play_toclient_attach_entity(char *dest, play_toclient_attach_entity source);
char * dec_play_toclient_attach_entity(play_toclient_attach_entity *dest, char *source);

typedef struct {
  int64_t entity_id;
  int16_t velocity_x;
  int16_t velocity_y;
  int16_t velocity_z;
} play_toclient_entity_velocity;

int walk_play_toclient_entity_velocity(char *source, size_t max_len);
size_t size_play_toclient_entity_velocity(play_toclient_entity_velocity packet);
char * enc_play_toclient_entity_velocity(char *dest, play_toclient_entity_velocity source);
char * dec_play_toclient_entity_velocity(play_toclient_entity_velocity *dest, char *source);

typedef struct {
  int64_t entity_id;
  int64_t slot;
  mc_slot item;
} play_toclient_entity_equipment;

int walk_play_toclient_entity_equipment(char *source, size_t max_len);
size_t size_play_toclient_entity_equipment(play_toclient_entity_equipment packet);
char * enc_play_toclient_entity_equipment(char *dest, play_toclient_entity_equipment source);
char * dec_play_toclient_entity_equipment(play_toclient_entity_equipment *dest, char *source);
void free_play_toclient_entity_equipment(play_toclient_entity_equipment packet);

typedef struct {
  float experience_bar;
  int64_t level;
  int64_t total_experience;
} play_toclient_experience;

int walk_play_toclient_experience(char *source, size_t max_len);
size_t size_play_toclient_experience(play_toclient_experience packet);
char * enc_play_toclient_experience(char *dest, play_toclient_experience source);
char * dec_play_toclient_experience(play_toclient_experience *dest, char *source);

typedef struct {
  float health;
  int64_t food;
  float food_saturation;
} play_toclient_update_health;

int walk_play_toclient_update_health(char *source, size_t max_len);
size_t size_play_toclient_update_health(play_toclient_update_health packet);
char * enc_play_toclient_update_health(char *dest, play_toclient_update_health source);
char * dec_play_toclient_update_health(play_toclient_update_health *dest, char *source);

typedef struct {
  sds name;
  int8_t action;
  sds display_text;
  int64_t type;
} play_toclient_scoreboard_objective;

int walk_play_toclient_scoreboard_objective(char *source, size_t max_len);
size_t size_play_toclient_scoreboard_objective(play_toclient_scoreboard_objective packet);
char * enc_play_toclient_scoreboard_objective(char *dest, play_toclient_scoreboard_objective source);
char * dec_play_toclient_scoreboard_objective(play_toclient_scoreboard_objective *dest, char *source);
void free_play_toclient_scoreboard_objective(play_toclient_scoreboard_objective packet);

typedef struct {
  int64_t entity_id;
  struct {
    int64_t count;
    int64_t *base;
  } passengers;
} play_toclient_set_passengers;

int walk_play_toclient_set_passengers(char *source, size_t max_len);
size_t size_play_toclient_set_passengers(play_toclient_set_passengers packet);
char * enc_play_toclient_set_passengers(char *dest, play_toclient_set_passengers source);
char * dec_play_toclient_set_passengers(play_toclient_set_passengers *dest, char *source);
void free_play_toclient_set_passengers(play_toclient_set_passengers packet);

typedef struct {
  sds team;
  int8_t mode;
  sds name;
  int8_t friendly_fire;
  sds name_tag_visibility;
  sds collision_rule;
  int64_t formatting;
  sds prefix;
  sds suffix;
  struct {
    int64_t count;
    sds *base;
  } players;
} play_toclient_teams;

int walk_play_toclient_teams(char *source, size_t max_len);
size_t size_play_toclient_teams(play_toclient_teams packet);
char * enc_play_toclient_teams(char *dest, play_toclient_teams source);
char * dec_play_toclient_teams(play_toclient_teams *dest, char *source);
void free_play_toclient_teams(play_toclient_teams packet);

typedef struct {
  sds item_name;
  int8_t action;
  sds score_name;
  int64_t value;
} play_toclient_scoreboard_score;

int walk_play_toclient_scoreboard_score(char *source, size_t max_len);
size_t size_play_toclient_scoreboard_score(play_toclient_scoreboard_score packet);
char * enc_play_toclient_scoreboard_score(char *dest, play_toclient_scoreboard_score source);
char * dec_play_toclient_scoreboard_score(play_toclient_scoreboard_score *dest, char *source);
void free_play_toclient_scoreboard_score(play_toclient_scoreboard_score packet);

typedef struct {
  mc_position location;
} play_toclient_spawn_position;

int walk_play_toclient_spawn_position(char *source, size_t max_len);
size_t size_play_toclient_spawn_position(play_toclient_spawn_position packet);
char * enc_play_toclient_spawn_position(char *dest, play_toclient_spawn_position source);
char * dec_play_toclient_spawn_position(play_toclient_spawn_position *dest, char *source);

typedef struct {
  int64_t age;
  int64_t time;
} play_toclient_update_time;

int walk_play_toclient_update_time(char *source, size_t max_len);
size_t size_play_toclient_update_time(play_toclient_update_time packet);
char * enc_play_toclient_update_time(char *dest, play_toclient_update_time source);
char * dec_play_toclient_update_time(play_toclient_update_time *dest, char *source);

typedef struct {
  int64_t action;
  sds text;
  int32_t fade_in;
  int32_t stay;
  int32_t fade_out;
} play_toclient_title;

int walk_play_toclient_title(char *source, size_t max_len);
size_t size_play_toclient_title(play_toclient_title packet);
char * enc_play_toclient_title(char *dest, play_toclient_title source);
char * dec_play_toclient_title(play_toclient_title *dest, char *source);
void free_play_toclient_title(play_toclient_title packet);

typedef struct {
  int64_t sound_id;
  int64_t sound_category;
  int64_t entity_id;
  float volume;
  float pitch;
} play_toclient_entity_sound_effect;

int walk_play_toclient_entity_sound_effect(char *source, size_t max_len);
size_t size_play_toclient_entity_sound_effect(play_toclient_entity_sound_effect packet);
char * enc_play_toclient_entity_sound_effect(char *dest, play_toclient_entity_sound_effect source);
char * dec_play_toclient_entity_sound_effect(play_toclient_entity_sound_effect *dest, char *source);

typedef struct {
  int8_t flags;
  int64_t source;
  sds sound;
} play_toclient_stop_sound;

int walk_play_toclient_stop_sound(char *source, size_t max_len);
size_t size_play_toclient_stop_sound(play_toclient_stop_sound packet);
char * enc_play_toclient_stop_sound(char *dest, play_toclient_stop_sound source);
char * dec_play_toclient_stop_sound(play_toclient_stop_sound *dest, char *source);
void free_play_toclient_stop_sound(play_toclient_stop_sound packet);

typedef struct {
  int64_t sound_id;
  int64_t sound_category;
  int32_t x;
  int32_t y;
  int32_t z;
  float volume;
  float pitch;
} play_toclient_sound_effect;

int walk_play_toclient_sound_effect(char *source, size_t max_len);
size_t size_play_toclient_sound_effect(play_toclient_sound_effect packet);
char * enc_play_toclient_sound_effect(char *dest, play_toclient_sound_effect source);
char * dec_play_toclient_sound_effect(play_toclient_sound_effect *dest, char *source);

typedef struct {
  sds header;
  sds footer;
} play_toclient_playerlist_header;

int walk_play_toclient_playerlist_header(char *source, size_t max_len);
size_t size_play_toclient_playerlist_header(play_toclient_playerlist_header packet);
char * enc_play_toclient_playerlist_header(char *dest, play_toclient_playerlist_header source);
char * dec_play_toclient_playerlist_header(play_toclient_playerlist_header *dest, char *source);
void free_play_toclient_playerlist_header(play_toclient_playerlist_header packet);

typedef struct {
  int64_t collected_entity_id;
  int64_t collector_entity_id;
  int64_t pickup_item_count;
} play_toclient_collect;

int walk_play_toclient_collect(char *source, size_t max_len);
size_t size_play_toclient_collect(play_toclient_collect packet);
char * enc_play_toclient_collect(char *dest, play_toclient_collect source);
char * dec_play_toclient_collect(play_toclient_collect *dest, char *source);

typedef struct {
  int64_t entity_id;
  double x;
  double y;
  double z;
  int8_t yaw;
  int8_t pitch;
  uint8_t on_ground;
} play_toclient_entity_teleport;

int walk_play_toclient_entity_teleport(char *source, size_t max_len);
size_t size_play_toclient_entity_teleport(play_toclient_entity_teleport packet);
char * enc_play_toclient_entity_teleport(char *dest, play_toclient_entity_teleport source);
char * dec_play_toclient_entity_teleport(play_toclient_entity_teleport *dest, char *source);

typedef struct {
  int64_t entity_id;
  int8_t head_yaw;
} play_toclient_entity_head_rotation;

int walk_play_toclient_entity_head_rotation(char *source, size_t max_len);
size_t size_play_toclient_entity_head_rotation(play_toclient_entity_head_rotation packet);
char * enc_play_toclient_entity_head_rotation(char *dest, play_toclient_entity_head_rotation source);
char * dec_play_toclient_entity_head_rotation(play_toclient_entity_head_rotation *dest, char *source);

typedef struct {
  int64_t entity_id;
  int8_t effect_id;
  int8_t amplifier;
  int64_t duration;
  int8_t hide_particles;
} play_toclient_entity_effect;

int walk_play_toclient_entity_effect(char *source, size_t max_len);
size_t size_play_toclient_entity_effect(play_toclient_entity_effect packet);
char * enc_play_toclient_entity_effect(char *dest, play_toclient_entity_effect source);
char * dec_play_toclient_entity_effect(play_toclient_entity_effect *dest, char *source);

typedef struct {
  struct {
    uint8_t opt;
    sds val;
  } id;
} play_toclient_select_advancement_tab;

int walk_play_toclient_select_advancement_tab(char *source, size_t max_len);
size_t size_play_toclient_select_advancement_tab(play_toclient_select_advancement_tab packet);
char * enc_play_toclient_select_advancement_tab(char *dest, play_toclient_select_advancement_tab source);
char * dec_play_toclient_select_advancement_tab(play_toclient_select_advancement_tab *dest, char *source);
void free_play_toclient_select_advancement_tab(play_toclient_select_advancement_tab packet);

typedef struct {
  struct {
    int64_t count;
    struct {
      sds type;
      sds recipe_id;
      union {
        struct {
          sds group;
          struct {
            int64_t count;
            mc_ingredient *base;
          } ingredients;
          mc_slot result;
        } enum_minecraft_crafting_shapeless;
        struct {
          int64_t width;
          int64_t height;
          sds group;
          mc_ingredient **ingredients;
          mc_slot result;
        } enum_minecraft_crafting_shaped;
        mc_smelting enum_minecraft_smelting;
        mc_smelting enum_minecraft_blasting;
        mc_smelting enum_minecraft_smoking;
        mc_smelting enum_minecraft_campfire_cooking;
        struct {
          sds group;
          mc_ingredient ingredient;
          mc_slot result;
        } enum_minecraft_stonecutting;
      } data;
    } *base;
  } recipes;
} play_toclient_declare_recipes;

int walk_play_toclient_declare_recipes(char *source, size_t max_len);
size_t size_play_toclient_declare_recipes(play_toclient_declare_recipes packet);
char * enc_play_toclient_declare_recipes(char *dest, play_toclient_declare_recipes source);
char * dec_play_toclient_declare_recipes(play_toclient_declare_recipes *dest, char *source);
void free_play_toclient_declare_recipes(play_toclient_declare_recipes packet);

typedef struct {
  mc_itemtag_array block_tags;
  mc_itemtag_array item_tags;
  mc_itemtag_array fluid_tags;
  mc_itemtag_array entity_tags;
} play_toclient_tags;

int walk_play_toclient_tags(char *source, size_t max_len);
size_t size_play_toclient_tags(play_toclient_tags packet);
char * enc_play_toclient_tags(char *dest, play_toclient_tags source);
char * dec_play_toclient_tags(play_toclient_tags *dest, char *source);
void free_play_toclient_tags(play_toclient_tags packet);

typedef struct {
  mc_position location;
  int64_t block;
  int64_t status;
  uint8_t successful;
} play_toclient_acknowledge_player_digging;

int walk_play_toclient_acknowledge_player_digging(char *source, size_t max_len);
size_t size_play_toclient_acknowledge_player_digging(play_toclient_acknowledge_player_digging packet);
char * enc_play_toclient_acknowledge_player_digging(char *dest, play_toclient_acknowledge_player_digging source);
char * dec_play_toclient_acknowledge_player_digging(play_toclient_acknowledge_player_digging *dest, char *source);

typedef struct {
  int64_t teleport_id;
} play_toserver_teleport_confirm;

int walk_play_toserver_teleport_confirm(char *source, size_t max_len);
size_t size_play_toserver_teleport_confirm(play_toserver_teleport_confirm packet);
char * enc_play_toserver_teleport_confirm(char *dest, play_toserver_teleport_confirm source);
char * dec_play_toserver_teleport_confirm(play_toserver_teleport_confirm *dest, char *source);

typedef struct {
  int64_t transaction_id;
  mc_position location;
} play_toserver_query_block_nbt;

int walk_play_toserver_query_block_nbt(char *source, size_t max_len);
size_t size_play_toserver_query_block_nbt(play_toserver_query_block_nbt packet);
char * enc_play_toserver_query_block_nbt(char *dest, play_toserver_query_block_nbt source);
char * dec_play_toserver_query_block_nbt(play_toserver_query_block_nbt *dest, char *source);

typedef struct {
  uint8_t new_difficulty;
} play_toserver_set_difficulty;

int walk_play_toserver_set_difficulty(char *source, size_t max_len);
size_t size_play_toserver_set_difficulty(play_toserver_set_difficulty packet);
char * enc_play_toserver_set_difficulty(char *dest, play_toserver_set_difficulty source);
char * dec_play_toserver_set_difficulty(play_toserver_set_difficulty *dest, char *source);

typedef struct {
  mc_slot new_book;
  uint8_t signing;
  int64_t hand;
} play_toserver_edit_book;

int walk_play_toserver_edit_book(char *source, size_t max_len);
size_t size_play_toserver_edit_book(play_toserver_edit_book packet);
char * enc_play_toserver_edit_book(char *dest, play_toserver_edit_book source);
char * dec_play_toserver_edit_book(play_toserver_edit_book *dest, char *source);
void free_play_toserver_edit_book(play_toserver_edit_book packet);

typedef struct {
  int64_t transaction_id;
  int64_t entity_id;
} play_toserver_query_entity_nbt;

int walk_play_toserver_query_entity_nbt(char *source, size_t max_len);
size_t size_play_toserver_query_entity_nbt(play_toserver_query_entity_nbt packet);
char * enc_play_toserver_query_entity_nbt(char *dest, play_toserver_query_entity_nbt source);
char * dec_play_toserver_query_entity_nbt(play_toserver_query_entity_nbt *dest, char *source);

typedef struct {
  int64_t slot;
} play_toserver_pick_item;

int walk_play_toserver_pick_item(char *source, size_t max_len);
size_t size_play_toserver_pick_item(play_toserver_pick_item packet);
char * enc_play_toserver_pick_item(char *dest, play_toserver_pick_item source);
char * dec_play_toserver_pick_item(play_toserver_pick_item *dest, char *source);

typedef struct {
  sds name;
} play_toserver_name_item;

int walk_play_toserver_name_item(char *source, size_t max_len);
size_t size_play_toserver_name_item(play_toserver_name_item packet);
char * enc_play_toserver_name_item(char *dest, play_toserver_name_item source);
char * dec_play_toserver_name_item(play_toserver_name_item *dest, char *source);
void free_play_toserver_name_item(play_toserver_name_item packet);

typedef struct {
  int64_t slot;
} play_toserver_select_trade;

int walk_play_toserver_select_trade(char *source, size_t max_len);
size_t size_play_toserver_select_trade(play_toserver_select_trade packet);
char * enc_play_toserver_select_trade(char *dest, play_toserver_select_trade source);
char * dec_play_toserver_select_trade(play_toserver_select_trade *dest, char *source);

typedef struct {
  int64_t primary_effect;
  int64_t secondary_effect;
} play_toserver_set_beacon_effect;

int walk_play_toserver_set_beacon_effect(char *source, size_t max_len);
size_t size_play_toserver_set_beacon_effect(play_toserver_set_beacon_effect packet);
char * enc_play_toserver_set_beacon_effect(char *dest, play_toserver_set_beacon_effect source);
char * dec_play_toserver_set_beacon_effect(play_toserver_set_beacon_effect *dest, char *source);

typedef struct {
  mc_position location;
  sds command;
  int64_t mode;
  uint8_t flags;
} play_toserver_update_command_block;

int walk_play_toserver_update_command_block(char *source, size_t max_len);
size_t size_play_toserver_update_command_block(play_toserver_update_command_block packet);
char * enc_play_toserver_update_command_block(char *dest, play_toserver_update_command_block source);
char * dec_play_toserver_update_command_block(play_toserver_update_command_block *dest, char *source);
void free_play_toserver_update_command_block(play_toserver_update_command_block packet);

typedef struct {
  int64_t entity_id;
  sds command;
  uint8_t track_output;
} play_toserver_update_command_block_minecart;

int walk_play_toserver_update_command_block_minecart(char *source, size_t max_len);
size_t size_play_toserver_update_command_block_minecart(play_toserver_update_command_block_minecart packet);
char * enc_play_toserver_update_command_block_minecart(char *dest, play_toserver_update_command_block_minecart source);
char * dec_play_toserver_update_command_block_minecart(play_toserver_update_command_block_minecart *dest, char *source);
void free_play_toserver_update_command_block_minecart(play_toserver_update_command_block_minecart packet);

typedef struct {
  mc_position location;
  int64_t action;
  int64_t mode;
  sds name;
  uint8_t offset_x;
  uint8_t offset_y;
  uint8_t offset_z;
  uint8_t size_x;
  uint8_t size_y;
  uint8_t size_z;
  int64_t mirror;
  int64_t rotation;
  sds metadata;
  float integrity;
  int64_t seed;
  uint8_t flags;
} play_toserver_update_structure_block;

int walk_play_toserver_update_structure_block(char *source, size_t max_len);
size_t size_play_toserver_update_structure_block(play_toserver_update_structure_block packet);
char * enc_play_toserver_update_structure_block(char *dest, play_toserver_update_structure_block source);
char * dec_play_toserver_update_structure_block(play_toserver_update_structure_block *dest, char *source);
void free_play_toserver_update_structure_block(play_toserver_update_structure_block packet);

typedef struct {
  int64_t transaction_id;
  sds text;
} play_toserver_tab_complete;

int walk_play_toserver_tab_complete(char *source, size_t max_len);
size_t size_play_toserver_tab_complete(play_toserver_tab_complete packet);
char * enc_play_toserver_tab_complete(char *dest, play_toserver_tab_complete source);
char * dec_play_toserver_tab_complete(play_toserver_tab_complete *dest, char *source);
void free_play_toserver_tab_complete(play_toserver_tab_complete packet);

typedef struct {
  sds message;
} play_toserver_chat;

int walk_play_toserver_chat(char *source, size_t max_len);
size_t size_play_toserver_chat(play_toserver_chat packet);
char * enc_play_toserver_chat(char *dest, play_toserver_chat source);
char * dec_play_toserver_chat(play_toserver_chat *dest, char *source);
void free_play_toserver_chat(play_toserver_chat packet);

typedef struct {
  int64_t action_id;
} play_toserver_client_command;

int walk_play_toserver_client_command(char *source, size_t max_len);
size_t size_play_toserver_client_command(play_toserver_client_command packet);
char * enc_play_toserver_client_command(char *dest, play_toserver_client_command source);
char * dec_play_toserver_client_command(play_toserver_client_command *dest, char *source);

typedef struct {
  sds locale;
  int8_t view_distance;
  int64_t chat_flags;
  uint8_t chat_colors;
  uint8_t skin_parts;
  int64_t main_hand;
} play_toserver_settings;

int walk_play_toserver_settings(char *source, size_t max_len);
size_t size_play_toserver_settings(play_toserver_settings packet);
char * enc_play_toserver_settings(char *dest, play_toserver_settings source);
char * dec_play_toserver_settings(play_toserver_settings *dest, char *source);
void free_play_toserver_settings(play_toserver_settings packet);

typedef struct {
  int8_t window_id;
  int16_t action;
  uint8_t accepted;
} play_toserver_transaction;

int walk_play_toserver_transaction(char *source, size_t max_len);
size_t size_play_toserver_transaction(play_toserver_transaction packet);
char * enc_play_toserver_transaction(char *dest, play_toserver_transaction source);
char * dec_play_toserver_transaction(play_toserver_transaction *dest, char *source);

typedef struct {
  int8_t window_id;
  int8_t enchantment;
} play_toserver_enchant_item;

int walk_play_toserver_enchant_item(char *source, size_t max_len);
size_t size_play_toserver_enchant_item(play_toserver_enchant_item packet);
char * enc_play_toserver_enchant_item(char *dest, play_toserver_enchant_item source);
char * dec_play_toserver_enchant_item(play_toserver_enchant_item *dest, char *source);

typedef struct {
  uint8_t window_id;
  int16_t slot;
  int8_t mouse_button;
  int16_t action;
  int8_t mode;
  mc_slot item;
} play_toserver_window_click;

int walk_play_toserver_window_click(char *source, size_t max_len);
size_t size_play_toserver_window_click(play_toserver_window_click packet);
char * enc_play_toserver_window_click(char *dest, play_toserver_window_click source);
char * dec_play_toserver_window_click(play_toserver_window_click *dest, char *source);
void free_play_toserver_window_click(play_toserver_window_click packet);

typedef struct {
  uint8_t window_id;
} play_toserver_close_window;

int walk_play_toserver_close_window(char *source, size_t max_len);
size_t size_play_toserver_close_window(play_toserver_close_window packet);
char * enc_play_toserver_close_window(char *dest, play_toserver_close_window source);
char * dec_play_toserver_close_window(play_toserver_close_window *dest, char *source);

typedef struct {
  sds channel;
  mc_buffer data;
} play_toserver_custom_payload;

int walk_play_toserver_custom_payload(char *source, size_t max_len);
size_t size_play_toserver_custom_payload(play_toserver_custom_payload packet);
char * enc_play_toserver_custom_payload(char *dest, play_toserver_custom_payload source);
char * dec_play_toserver_custom_payload(play_toserver_custom_payload *dest, char *source, size_t total_size);
void free_play_toserver_custom_payload(play_toserver_custom_payload packet);

typedef struct {
  int64_t target;
  int64_t mouse;
  float x;
  float y;
  float z;
  int64_t hand;
} play_toserver_use_entity;

int walk_play_toserver_use_entity(char *source, size_t max_len);
size_t size_play_toserver_use_entity(play_toserver_use_entity packet);
char * enc_play_toserver_use_entity(char *dest, play_toserver_use_entity source);
char * dec_play_toserver_use_entity(play_toserver_use_entity *dest, char *source);

typedef struct {
  int64_t keep_alive_id;
} play_toserver_keep_alive;

int walk_play_toserver_keep_alive(char *source, size_t max_len);
size_t size_play_toserver_keep_alive(play_toserver_keep_alive packet);
char * enc_play_toserver_keep_alive(char *dest, play_toserver_keep_alive source);
char * dec_play_toserver_keep_alive(play_toserver_keep_alive *dest, char *source);

typedef struct {
  uint8_t locked;
} play_toserver_lock_difficulty;

int walk_play_toserver_lock_difficulty(char *source, size_t max_len);
size_t size_play_toserver_lock_difficulty(play_toserver_lock_difficulty packet);
char * enc_play_toserver_lock_difficulty(char *dest, play_toserver_lock_difficulty source);
char * dec_play_toserver_lock_difficulty(play_toserver_lock_difficulty *dest, char *source);

typedef struct {
  double x;
  double y;
  double z;
  uint8_t on_ground;
} play_toserver_position;

int walk_play_toserver_position(char *source, size_t max_len);
size_t size_play_toserver_position(play_toserver_position packet);
char * enc_play_toserver_position(char *dest, play_toserver_position source);
char * dec_play_toserver_position(play_toserver_position *dest, char *source);

typedef struct {
  double x;
  double y;
  double z;
  float yaw;
  float pitch;
  uint8_t on_ground;
} play_toserver_position_look;

int walk_play_toserver_position_look(char *source, size_t max_len);
size_t size_play_toserver_position_look(play_toserver_position_look packet);
char * enc_play_toserver_position_look(char *dest, play_toserver_position_look source);
char * dec_play_toserver_position_look(play_toserver_position_look *dest, char *source);

typedef struct {
  float yaw;
  float pitch;
  uint8_t on_ground;
} play_toserver_look;

int walk_play_toserver_look(char *source, size_t max_len);
size_t size_play_toserver_look(play_toserver_look packet);
char * enc_play_toserver_look(char *dest, play_toserver_look source);
char * dec_play_toserver_look(play_toserver_look *dest, char *source);

typedef struct {
  uint8_t on_ground;
} play_toserver_flying;

int walk_play_toserver_flying(char *source, size_t max_len);
size_t size_play_toserver_flying(play_toserver_flying packet);
char * enc_play_toserver_flying(char *dest, play_toserver_flying source);
char * dec_play_toserver_flying(play_toserver_flying *dest, char *source);

typedef struct {
  double x;
  double y;
  double z;
  float yaw;
  float pitch;
} play_toserver_vehicle_move;

int walk_play_toserver_vehicle_move(char *source, size_t max_len);
size_t size_play_toserver_vehicle_move(play_toserver_vehicle_move packet);
char * enc_play_toserver_vehicle_move(char *dest, play_toserver_vehicle_move source);
char * dec_play_toserver_vehicle_move(play_toserver_vehicle_move *dest, char *source);

typedef struct {
  uint8_t unknown1;
  uint8_t unknown2;
} play_toserver_steer_boat;

int walk_play_toserver_steer_boat(char *source, size_t max_len);
size_t size_play_toserver_steer_boat(play_toserver_steer_boat packet);
char * enc_play_toserver_steer_boat(char *dest, play_toserver_steer_boat source);
char * dec_play_toserver_steer_boat(play_toserver_steer_boat *dest, char *source);

typedef struct {
  int8_t window_id;
  sds recipe;
  uint8_t make_all;
} play_toserver_craft_recipe_request;

int walk_play_toserver_craft_recipe_request(char *source, size_t max_len);
size_t size_play_toserver_craft_recipe_request(play_toserver_craft_recipe_request packet);
char * enc_play_toserver_craft_recipe_request(char *dest, play_toserver_craft_recipe_request source);
char * dec_play_toserver_craft_recipe_request(play_toserver_craft_recipe_request *dest, char *source);
void free_play_toserver_craft_recipe_request(play_toserver_craft_recipe_request packet);

typedef struct {
  int8_t flags;
  float flying_speed;
  float walking_speed;
} play_toserver_abilities;

int walk_play_toserver_abilities(char *source, size_t max_len);
size_t size_play_toserver_abilities(play_toserver_abilities packet);
char * enc_play_toserver_abilities(char *dest, play_toserver_abilities source);
char * dec_play_toserver_abilities(play_toserver_abilities *dest, char *source);

typedef struct {
  int8_t status;
  mc_position location;
  int8_t face;
} play_toserver_block_dig;

int walk_play_toserver_block_dig(char *source, size_t max_len);
size_t size_play_toserver_block_dig(play_toserver_block_dig packet);
char * enc_play_toserver_block_dig(char *dest, play_toserver_block_dig source);
char * dec_play_toserver_block_dig(play_toserver_block_dig *dest, char *source);

typedef struct {
  int64_t entity_id;
  int64_t action_id;
  int64_t jump_boost;
} play_toserver_entity_action;

int walk_play_toserver_entity_action(char *source, size_t max_len);
size_t size_play_toserver_entity_action(play_toserver_entity_action packet);
char * enc_play_toserver_entity_action(char *dest, play_toserver_entity_action source);
char * dec_play_toserver_entity_action(play_toserver_entity_action *dest, char *source);

typedef struct {
  float sideways;
  float forward;
  uint8_t jump;
} play_toserver_steer_vehicle;

int walk_play_toserver_steer_vehicle(char *source, size_t max_len);
size_t size_play_toserver_steer_vehicle(play_toserver_steer_vehicle packet);
char * enc_play_toserver_steer_vehicle(char *dest, play_toserver_steer_vehicle source);
char * dec_play_toserver_steer_vehicle(play_toserver_steer_vehicle *dest, char *source);

typedef struct {
  int64_t type;
  union {
    struct {
      sds displayed_recipe;
    } enum_0;
    struct {
      uint8_t crafting_book_open;
      uint8_t crafting_filter;
      uint8_t smelting_book_open;
      uint8_t smelting_filter;
      uint8_t blasting_book_open;
      uint8_t blasting_filter;
      uint8_t smoking_book_open;
      uint8_t smoking_filter;
    } enum_1;
  } anonymous;
} play_toserver_crafting_book_data;

int walk_play_toserver_crafting_book_data(char *source, size_t max_len);
size_t size_play_toserver_crafting_book_data(play_toserver_crafting_book_data packet);
char * enc_play_toserver_crafting_book_data(char *dest, play_toserver_crafting_book_data source);
char * dec_play_toserver_crafting_book_data(play_toserver_crafting_book_data *dest, char *source);
void free_play_toserver_crafting_book_data(play_toserver_crafting_book_data packet);

typedef struct {
  int64_t result;
} play_toserver_resource_pack_receive;

int walk_play_toserver_resource_pack_receive(char *source, size_t max_len);
size_t size_play_toserver_resource_pack_receive(play_toserver_resource_pack_receive packet);
char * enc_play_toserver_resource_pack_receive(char *dest, play_toserver_resource_pack_receive source);
char * dec_play_toserver_resource_pack_receive(play_toserver_resource_pack_receive *dest, char *source);

typedef struct {
  int16_t slot_id;
} play_toserver_held_item_slot;

int walk_play_toserver_held_item_slot(char *source, size_t max_len);
size_t size_play_toserver_held_item_slot(play_toserver_held_item_slot packet);
char * enc_play_toserver_held_item_slot(char *dest, play_toserver_held_item_slot source);
char * dec_play_toserver_held_item_slot(play_toserver_held_item_slot *dest, char *source);

typedef struct {
  int16_t slot;
  mc_slot item;
} play_toserver_set_creative_slot;

int walk_play_toserver_set_creative_slot(char *source, size_t max_len);
size_t size_play_toserver_set_creative_slot(play_toserver_set_creative_slot packet);
char * enc_play_toserver_set_creative_slot(char *dest, play_toserver_set_creative_slot source);
char * dec_play_toserver_set_creative_slot(play_toserver_set_creative_slot *dest, char *source);
void free_play_toserver_set_creative_slot(play_toserver_set_creative_slot packet);

typedef struct {
  mc_position location;
  sds attachment_type;
  sds target_pool;
  sds final_state;
} play_toserver_update_jigsaw_block;

int walk_play_toserver_update_jigsaw_block(char *source, size_t max_len);
size_t size_play_toserver_update_jigsaw_block(play_toserver_update_jigsaw_block packet);
char * enc_play_toserver_update_jigsaw_block(char *dest, play_toserver_update_jigsaw_block source);
char * dec_play_toserver_update_jigsaw_block(play_toserver_update_jigsaw_block *dest, char *source);
void free_play_toserver_update_jigsaw_block(play_toserver_update_jigsaw_block packet);

typedef struct {
  mc_position location;
  sds text1;
  sds text2;
  sds text3;
  sds text4;
} play_toserver_update_sign;

int walk_play_toserver_update_sign(char *source, size_t max_len);
size_t size_play_toserver_update_sign(play_toserver_update_sign packet);
char * enc_play_toserver_update_sign(char *dest, play_toserver_update_sign source);
char * dec_play_toserver_update_sign(play_toserver_update_sign *dest, char *source);
void free_play_toserver_update_sign(play_toserver_update_sign packet);

typedef struct {
  int64_t hand;
} play_toserver_arm_animation;

int walk_play_toserver_arm_animation(char *source, size_t max_len);
size_t size_play_toserver_arm_animation(play_toserver_arm_animation packet);
char * enc_play_toserver_arm_animation(char *dest, play_toserver_arm_animation source);
char * dec_play_toserver_arm_animation(play_toserver_arm_animation *dest, char *source);

typedef struct {
  mc_uuid target;
} play_toserver_spectate;

int walk_play_toserver_spectate(char *source, size_t max_len);
size_t size_play_toserver_spectate(play_toserver_spectate packet);
char * enc_play_toserver_spectate(char *dest, play_toserver_spectate source);
char * dec_play_toserver_spectate(play_toserver_spectate *dest, char *source);

typedef struct {
  int64_t hand;
  mc_position location;
  int64_t direction;
  float cursor_x;
  float cursor_y;
  float cursor_z;
  uint8_t inside_block;
} play_toserver_block_place;

int walk_play_toserver_block_place(char *source, size_t max_len);
size_t size_play_toserver_block_place(play_toserver_block_place packet);
char * enc_play_toserver_block_place(char *dest, play_toserver_block_place source);
char * dec_play_toserver_block_place(play_toserver_block_place *dest, char *source);

typedef struct {
  int64_t hand;
} play_toserver_use_item;

int walk_play_toserver_use_item(char *source, size_t max_len);
size_t size_play_toserver_use_item(play_toserver_use_item packet);
char * enc_play_toserver_use_item(char *dest, play_toserver_use_item source);
char * dec_play_toserver_use_item(play_toserver_use_item *dest, char *source);

typedef struct {
  int64_t action;
  sds tab_id;
} play_toserver_advancement_tab;

int walk_play_toserver_advancement_tab(char *source, size_t max_len);
size_t size_play_toserver_advancement_tab(play_toserver_advancement_tab packet);
char * enc_play_toserver_advancement_tab(char *dest, play_toserver_advancement_tab source);
char * dec_play_toserver_advancement_tab(play_toserver_advancement_tab *dest, char *source);
void free_play_toserver_advancement_tab(play_toserver_advancement_tab packet);
#endif
